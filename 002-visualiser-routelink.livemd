# Visualiser les routelinks contenus dans une archive NeTEx

```elixir
Mix.install([
  {:kino_maplibre, "~> 0.1.12"},
  {:unzip, "~> 0.12.0"}
])

Code.require_file(__DIR__ <> "/lib/zip_support.ex")
Code.require_file(__DIR__ <> "/lib/xml_support.ex")
Code.require_file(__DIR__ <> "/lib/helpers.ex")

:ok
```

## Extraction de la donnée RouteLink

On prend le fichier NeTEx de Rochefort, et on liste les entrées du fichier zip.

Puis on sélectionne le nom qui semble correspondre à la ligne B (il sera bien sûr préférable de lire le contenu pour travailler avec la référence de la ligne, on fait comme suit pour aller un peu plus vite sur cet exemple).

```elixir
zip_file = __DIR__ <> "/data/ca_rochefort_ocean-aggregated-netex-2025-03-03.zip"

zip = ZipSupport.open_zip!(zip_file)

ligne_b_entry = ZipSupport.list_zip_entries(zip)
  |> Enum.filter(& &1 =~ ~r/RBUS_B_B/)
  |> Helpers.one!()

```

À partir de ce nom, on va lire le contenu, et aller chercher tous les noeuds `RouteLink` avec une "requête XPath" ici, puis prendre le premier, et l'afficher de façon colorée (version beta).

````elixir
content = ZipSupport.read_entry!(zip, ligne_b_entry) |> XmlSupport.string_to_xmerl!()

routelink = content |> XmlSupport.xpath!("//RouteLink") |> List.first()

xml_string = [routelink]
|> :xmerl.export_simple(:xmerl_xml) 
|> IO.iodata_to_binary()
|> String.replace("            ", "")
|> String.replace(~r/<\?xml.*\?>/, "")

Kino.Markdown.new("```xml\n#{xml_string}\n```")

````

On remarque le point de début et de fin du tronçon, qu'on ira explorer prochainement.

Pour l'instant concentrons nous sur la géométrie du tronçon: le noeud `gis:posList` contient des latitudes/longitudes, qu'on va ici "parser" et récupérer.

```elixir
{:xmlObj, :string, data} = :xmerl_xpath.string(
  ~c"string(gis:LineString/gis:posList/text())", 
  routelink)

coordinates = data
|> :erlang.list_to_binary()
|> String.split(~r/\s/)
|> Enum.map(&String.to_float(&1))
|> Enum.chunk_every(2)
|> Enum.map(fn(x) -> Enum.reverse(x) end)
|> Enum.map(&List.to_tuple(&1))
```

## Affichage du résultat

Une fois cette liste de points obtenus, on peut les afficher et ainsi voir le cheminement prévu:

```elixir
geom = %Geo.LineString{coordinates: coordinates}

MapLibre.new(style: :street, center: {-0.9532910070419312, 45.926331115722656}, zoom: 15)
|> MapLibre.add_geo_source("geom", geom)
|> MapLibre.add_layer(
  id: "geom_line",
  source: "geom",
  type: :line,
  paint: [line_color: "#f63b8a", line_opacity: 0.7, line_width: 5]
)

```

## Points intéressants à améliorer

* [ ] Permettre à l'utilisateur de choisir un RouteLink
* [ ] Zoomer automatiquement (bounding box) sur ce RouteLink
* [ ] Permettre de mettre un lien vers un fichier NeTEx arbitraire
* [ ] Refactorer le code réutilisable

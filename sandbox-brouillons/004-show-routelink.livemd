# Afficher des routelinks

```elixir
Mix.install([
  {:kino_maplibre, "~> 0.1.12"},
  {:unzip, "~> 0.12.0"}
])

Code.require_file(__DIR__ <> "/lib/zip_support.ex")
Code.require_file(__DIR__ <> "/lib/xml_support.ex")
Code.require_file(__DIR__ <> "/lib/helpers.ex")
:ok
```

## Section

```elixir
zip_file = __DIR__ <> "/data/ca_rochefort_ocean-aggregated-netex-2025-03-03.zip"

zip = ZipSupport.open_zip!(zip_file)

ligne_b_entry = ZipSupport.list_zip_entries(zip)
  |> Enum.filter(& &1 =~ ~r/RBUS_B_B/)
  |> Helpers.one!()

```

````elixir
content = ZipSupport.read_entry!(zip, ligne_b_entry) |> XmlSupport.string_to_xmerl!()

routelink = content |> XmlSupport.xpath!("//RouteLink") |> List.first()

xml_string = [routelink]
|> :xmerl.export_simple(:xmerl_xml) 
|> IO.iodata_to_binary()
|> String.replace("            ", "")
|> String.replace(~r/<\?xml.*\?>/, "")

Kino.Markdown.new("```xml\n#{xml_string}\n```")
````

```elixir
{:xmlObj, :string, data} = :xmerl_xpath.string(
  ~c"string(gis:LineString/gis:posList/text())", 
  routelink)

coordinates = data
|> :erlang.list_to_binary()
|> String.split(~r/\s/)
|> Enum.map(&String.to_float(&1))
|> Enum.chunk_every(2)
|> Enum.map(fn(x) -> Enum.reverse(x) end)
|> Enum.map(&List.to_tuple(&1))
```

```elixir
geom = %Geo.LineString{coordinates: coordinates}

MapLibre.new(style: :street, center: {-0.9572910070419312, 45.925331115722656}, zoom: 15)
|> MapLibre.add_geo_source("geom", geom)
|> MapLibre.add_layer(
  id: "geom_line",
  source: "geom",
  type: :line,
  paint: [line_color: "#f63b8a", line_opacity: 0.7, line_width: 5]
)

```
